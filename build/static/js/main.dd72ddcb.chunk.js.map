{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","src","concat","this","props","id","alt","name","email","Component","CardList","_ref","cardcomponent","robots","map","user","i","Card_Card","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","_this3","filterrobot","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAEqBA,mLAEb,OAGIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BC,KAAKC,MAAMC,GAArC,YAAmDC,IAAI,SAC/DT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMG,MAChBV,EAAAC,EAAAC,cAAA,SAAII,KAAKC,MAAMI,gBATDC,aCanBC,EAXA,SAAAC,GAAa,IAEdC,EAFcD,EAAXE,OAEkBC,IAAI,SAACC,EAAKC,GACjC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMZ,GAAIU,EAAKV,GAAIE,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,UAE3D,OACIX,EAAAC,EAAAC,cAAA,WACCa,ICFEM,EAPC,SAAAP,GAA8BA,EAA5BQ,YAA4B,IAAhBC,EAAgBT,EAAhBS,aAC1B,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SAAQC,UAAU,mCAAmCqB,KAAK,SAASC,YAAY,eAAgBC,SAAUH,MCKlGI,EARA,SAACpB,GACZ,OACIP,EAAAC,EAAAC,cAAA,OAAK0B,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC9DxB,EAAMyB,WCCMC,qBACjB,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA7B,KAAA2B,IACTC,EAAAC,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjC,QAeJkC,eAAe,SAACC,GACZP,EAAKQ,SAAS,CAACpB,YAAYmB,EAAME,OAAOC,SAfxCV,EAAKW,MAAM,CACP7B,OAAO,GACPM,YAAY,IAJPY,mFAOM,IAAAY,EAAAxC,KACfyC,MAAM,8CAA8CC,KAAK,SAAAC,GACrD,OAAOA,EAASC,SACjBF,KAAK,SAAA9B,GACJ4B,EAAKJ,SAAS,CAAC1B,OAAOE,uCAUtB,IAAAiC,EAAA7C,KACI8C,EAAY9C,KAAKuC,MAAM7B,OAAOqC,OAAO,SAAAC,GACzC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASL,EAAKN,MAAMvB,YAAYiC,iBAEpE,OAA8B,IAA3BjD,KAAKuC,MAAM7B,OAAOyC,OACVzD,EAAAC,EAAAC,cAAA,wBAIPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,gBACAH,EAAAC,EAAAC,cAACwD,EAAD,CAAWnC,aAAcjB,KAAKkC,iBAC9BxC,EAAAC,EAAAC,cAACyD,EAAD,KACI3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAU5C,OAAQoC,aAnCDxC,cCMbiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAQnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.dd72ddcb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class Card extends Component{\r\n    render(){\r\n        return(\r\n        \r\n\r\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n                <img src={`https://robohash.org/${this.props.id}?200x200`} alt=\"robo\"/>\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport Card from './Card';\r\nimport {robots} from './robots';\r\n\r\nconst CardList=({robots}) =>{\r\n    \r\n        const cardcomponent=robots.map((user,i)=>{\r\n            return(<Card id={user.id} name={user.name} email={user.email} />);\r\n        })\r\n        return(\r\n            <div>\r\n            {cardcomponent}\r\n            </div>\r\n        );\r\n    }\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n    return(\r\n        <div className=\"pa2\">\r\n        <input  className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"robo friends\"  onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n const  Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflow:'scroll',border:'1px solid black',height:'900px'}}>\r\n        {props.children}\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n//import {robots} from './robots';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\nexport default class App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }    \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n            return response.json();\r\n        }).then(user=>{\r\n            this.setState({robots:user});\r\n        })\r\n        \r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value});\r\n       \r\n        \r\n    }\r\n    render(){\r\n         const  filterrobot=this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.robots.length===0){\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else{\r\n        return(\r\n            <div className=\"tc\">\r\n            <h1 className=\"f1 tc\">ROBO FRIENDS</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <CardList robots={filterrobot}/>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    }\r\n    \r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}